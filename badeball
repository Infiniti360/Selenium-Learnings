Here is a complete, step-by-step guide to using the @badeball/cypress-cucumber-preprocessor plugin with Cypress plus handling file downloads — all with full setup and code examples.

⸻

✅ Goal:
	•	Set up BDD (Cucumber) using @badeball/cypress-cucumber-preprocessor
	•	Write a .feature file
	•	Implement file download logic
	•	Verify the file is downloaded or download it via request

⸻

🧰 Tech Stack
	•	Cypress (v10+)
	•	@badeball/cypress-cucumber-preprocessor
	•	@bahmutov/cypress-esbuild-preprocessor
	•	cypress-downloadfile plugin for file handling

⸻

📦 Step 1: Install Required Packages

Run:

npm install --save-dev \
cypress \
@badeball/cypress-cucumber-preprocessor \
@bahmutov/cypress-esbuild-preprocessor \
esbuild \
cypress-downloadfile


⸻

📁 Step 2: Project Folder Structure

project-root/
│
├── cypress/
│   ├── e2e/
│   │   ├── features/
│   │   │   ├── download.feature
│   │   │   └── downloadSteps.js
│   ├── downloads/
│   └── support/
│       ├── commands.js
│       └── e2e.js
│
├── cypress.config.js
├── package.json


⸻

⚙️ Step 3: Cypress Configuration

cypress.config.js

const { defineConfig } = require("cypress");
const createBundler = require("@bahmutov/cypress-esbuild-preprocessor");
const createEsbuildPlugin = require("@badeball/cypress-cucumber-preprocessor/esbuild").createEsbuildPlugin;
const addCucumberPreprocessorPlugin = require("@badeball/cypress-cucumber-preprocessor").addCucumberPreprocessorPlugin;

module.exports = defineConfig({
  e2e: {
    specPattern: "cypress/e2e/features/**/*.feature",
    async setupNodeEvents(on, config) {
      await addCucumberPreprocessorPlugin(on, config);
      on(
        "file:preprocessor",
        createBundler({
          plugins: [createEsbuildPlugin(config)],
        })
      );
      return config;
    },
    baseUrl: "https://your-test-app.com", // replace with your actual base URL
  },
});


⸻

🧠 Step 4: Add Download Command

cypress/support/commands.js

import 'cypress-downloadfile/lib/downloadFileCommand';

cypress/support/e2e.js

import './commands';


⸻

✍️ Step 5: Write the Feature File

cypress/e2e/features/download.feature

Feature: File download feature

  Scenario: Download a report file
    Given I visit the download page
    When I click the download button
    Then I should have the file downloaded


⸻

🧪 Step 6: Step Definitions (JS Code)

cypress/e2e/features/downloadSteps.js

import { Given, When, Then } from "@badeball/cypress-cucumber-preprocessor";

Given("I visit the download page", () => {
  cy.visit("/downloads"); // adjust URL path
});

When("I click the download button", () => {
  // Option 1: trigger actual click
  cy.get("#downloadBtn").click();

  // Option 2: use request-based download
  // cy.downloadFile('https://your-test-app.com/files/sample.pdf', 'cypress/downloads', 'sample.pdf');
});

Then("I should have the file downloaded", () => {
  const filePath = "cypress/downloads/sample.pdf";
  cy.readFile(filePath, { timeout: 10000 }).should("exist");
});

✅ Replace #downloadBtn and file URL/path as per your app.

⸻

📥 Step 7: Download Button HTML (For Local Testing)

<!-- public/downloads.html -->
<button id="downloadBtn" onclick="window.location.href='/files/sample.pdf'">Download File</button>

Serve this locally or test against your app’s download page.

⸻

🧪 Step 8: Run Tests

npx cypress open   # for interactive mode
# or
npx cypress run    # headless run


⸻

✅ Summary of What’s Set Up

Feature	Status
BDD with Cucumber (.feature)	✅ Done
Plugin setup (badeball)	✅ Done
File download handling	✅ Done
Step definitions	✅ Done
Download validation	✅ Done
Folder/project layout	✅ Done


⸻

💡 Bonus Tips
	•	To avoid flaky downloads, prefer direct API file download (cy.downloadFile()) over UI-triggered downloads.
	•	Clean downloads folder before each test:

beforeEach(() => {
  cy.task('deleteDownloads'); // Create a custom task in `plugins/index.js` if needed
});



⸻

Would you like:
	•	A GitHub repo template with this structure already implemented?
	•	An example using LangChain or ChatGPT downloads?

Let me know, and I’ll generate it for you!
